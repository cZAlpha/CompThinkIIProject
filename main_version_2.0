"""
Zombiola Simulation

@ author Noah Klaus
@ version 1.0
"""
import random


class Scientist(object):
    def __init__(self, _ID, _health, _fieldOfStudy):
        self.ID = _ID
        self.health = _health
        self.x = 0
        self.y = 0
        self.fieldOfStudy = _fieldOfStudy
        self.hunger = 0

    def Consume(self):
        print("A Scientist Cannot Consume...")

    def Walk(self):
        print("A Scientist Cannot Walk...")

    def Attack(self):
        print("A Scientist Cannot Attack...")


class Susceptible(Scientist):
    # MUST IMPLEMENT ATTRIBUTES OF
    # 1.) BuildingMaterials

    def Consume(self):
        print("Susceptible: " + str(self.ID) + " consumes " + "<?what was consumed?>")

    def Walk(self):
        # Variables
        SusceptibleStepLowerBound = -2
        SusceptibleStepUpperBound = 2

        step = random.randint( SusceptibleStepLowerBound, SusceptibleStepUpperBound )
        if (self.x + step < 1 or self.x > 10) == False:
            self.x = self.x + step
        elif (self.y + step < 1 or self.y > 10) == False:
            self.y = self.y + step

        # Prints the movement of the object
        print("Susceptible: " + str(self.ID) + " walks to (" + str(self.x) + ", " + str(self.y) + ")" )

    def PrintID(self):
        print( str(self.ID), end = '' )

    def Attack(self):
        outcome = random.randint(1, 100)
        if ( outcome >= self.health):
            return True
        else:
            return False

    def Starve(self):
        print("Susceptible: " + str(self.ID) + " starved to death.")

    def BuildShelter(self):
        print("Susceptible: " + str(self.ID) + " builds shelter.")

    def GatherMaterials(self):
        print("Susceptible: " + str(self.ID) + " gathers materials.")

    def GatherFood(self):
        print("Susceptible: " + str(self.ID) + " gathers food.")

    def PerformExperiment(self):
        print("Susceptible: " + str(self.ID) + " performs experiment.")

    def HelpBuildBoat(self):
        print("Susceptible: " + str(self.ID) + " helps build the boat.")


class Infected(Susceptible):
    # MUST IMPLEMENT ATTRIBUTES OF
    # 1.) Time Infected
    # 2.) Hunger

    def Consume(self):
        print("Infected: " + str(self.ID) + " consumes " + "<?who/what was consumed?>")

    def Walk(self):
        # Variables
        InfectedStepLowerBound = -2
        InfectedStepUpperBound = 1

        step = random.randint(InfectedStepLowerBound, InfectedStepUpperBound)
        if (self.x + step < 1 or self.x > 10) == False:
            self.x = self.x + step
        elif (self.y + step < 1 or self.y > 10) == False:
            self.y = self.y + step

        # Prints the movement of the object
        print("Infected: " + str(self.ID) + " walks to (" + str(self.x) + ", " + str(self.y) + ")")

    def Attack(self):
        outcome = random.randint(1, 100)
        if (outcome >= self.health):
            return True
        else:
            return False

    def TimeInfected(self):
        print("Infected: " + str(self.ID) + " has been infected for " + "<?how long?>")

    def PrintID(self):
        print(str(self.ID), end='')




class Mutated(Infected):
    # MUST IMPLEMENT ATTRIBUTES OF
    # 1.) Mutation

    def Consume(self):
        print("Mutated: " + str(self.ID) + " consumes " + "<?who/what was consumed?>")

    def Walk(self):
        print("Mutated: " + str(self.ID) + " walks " + "<?moves how much?>")

    def Attack(self):
        print("Mutated: " + str(self.ID) + " attacks " + "<?who was attacked?>")

class Recovered(Infected):
    # MUST IMPLEMENT ATTRIBUTES OF
    # 1.) BuildingMaterials
    # 2.) Immune
    # 3.) BuildingMaterials

    def Consume(self):
        print("Recovered: " + str(self.ID) + " consumes " + "<?what was consumed?>")

    def Walk(self):
        print("Recovered: " + str(self.ID) + " walks " + "<?how far?>")

    def Attack(self):
        print("Recovered: " + str(self.ID) + " attacked " + "<?what was attacked?>")

    def Starve(self):
        print("Recovered: " + str(self.ID) + " starved to death.")

    def BuildShelter(self):
        print("Recovered: " + str(self.ID) + " builds shelter.")

    def GatherMaterials(self):
        print("Recovered: " + str(self.ID) + " gathers materials.")

    def GatherFood(self):
        print("Recovered: " + str(self.ID) + " gathers food.")

    def PerformExperiment(self):
        print("Recovered: " + str(self.ID) + " performs experiment.")

    def HelpBuildBoat(self):
        print("Recovered: " + str(self.ID) + " helps build the boat.")


class Dead(object):
    # ATTRIBUTES TO ADD
    # 1.) Date of Death

    def Consume(self):
        print("Dead people cannot consume")

    def Walk(self):
        print("Dead cannot walk")

    def Attack(self):
        print("Dead cannot attack")


def Main():
    # SIMULATION VARIABLES
    scientistCount = 50
    susceptibleCount = 46
    infectedCount = scientistCount - susceptibleCount
    AMOUNT_OF_HEALTH_LOST_AFTER_WINNING_FIGHT = 5
    
    # FIRST INITILIZATION LOOP
    # FOR SUSCEPTIBLES
    susceptibleList = []
    for i in range(susceptibleCount):
        # ID
        id = i + 1
        # HEALTH
        health = 100
        # Field of Study
        FieldOfStudyList = ["Chemist", "Physicist", "Chem. Engineer", "Anthropologist", "Geologist"]
        FieldOfStudyChoice = random.randint(0,4)
        FieldOfStudy = FieldOfStudyList[FieldOfStudyChoice]
    
        # Making the objects from class
        placeHolderSusceptible = Susceptible(id, health, FieldOfStudy)
        # Adds the object to overall list
        susceptibleList.append(placeHolderSusceptible)
    
    
    # SECOND INITILIZATION LOOP
    # FOR INFECTED
    infectedList = []
    for i in range(infectedCount):
        # ID
        id = i + 1
        # HEALTH
        health = random.randint(50, 100)
        # Field of Study
        FieldOfStudyList = ["Chemist", "Physicist", "Chem. Engineer", "Anthropologist", "Geologist"]
        FieldOfStudyChoice = random.randint(0,4)
        FieldOfStudy = FieldOfStudyList[FieldOfStudyChoice]
    
        # Making the objects from class using variables made above
        placeHolderInfected = Infected(id, health, FieldOfStudy)
        # Adds the object to overall list
        infectedList.append(placeHolderInfected)
    
    print("Number of Susceptibles: " + str(len(susceptibleList)))
    print("Number of Infected: " + str(len(infectedList)))
    
    # Time variable
    t = 0
    while (susceptibleCount > 1):
        t += 1
        print("Day number: " + str(t))
    
        # Survivor List and Variable
        SurvivingSusceptibleCount = 0
        SurvivingSusceptibleList = []
    
        for s in susceptibleList:
            # Makes the susceptibles move
            SusceptibleSurvives = True
            s.Walk()
    
            for i in infectedList:
                i.Walk()
                # To Do
                # Check if the susceptible and infected are in the same place
                if ( (s.x == i.x) and (s.y == i.y) ):
                    i.Walk()
    
                    print("========================================")
                    print("Susceptible: ", end='')
                    s.PrintID()
                    print(" has fought Infected: ", end='')
                    i.PrintID()
                    print("")
    
    
                    if s.Attack() == True: # Susceptible Wins
                        # Subtracts from their health even though they won
                        s.health -= AMOUNT_OF_HEALTH_LOST_AFTER_WINNING_FIGHT
    
                        print("Susceptible: ", end = '')
                        s.PrintID()
                        print(" has won.")
                        print("========================================")
                        pass
    
                    else: # Susceptible Loses
                        SusceptibleSurvives = False
                        # INITIIALIZE A NEW INFECTED
                        Surviving_Infected = Infected(infectedCount + 100 + 1, 50, "X")
                        # APPEND THAT NEW INFECTED TO THE LIST OF INFECTED
                        infectedList.append(Surviving_Infected)
                        # ADD ONE TO INFECTED COUNT
                        infectedCount += 1
    
                        print("Infected: ", end='')
                        i.PrintID()
                        print(" has won.")
                        print("========================================")
                        break
    
    
    
            if SusceptibleSurvives == True:
                print("Susceptible: " + str(Susceptible.PrintID(s)) + " survived the day.")
                SurvivingSusceptibleCount += 1
                SurvivingSusceptibleList.append(s)
    
    
        # Sets susceptibles equal to the surviving susceptibles
        susceptibleList = SurvivingSusceptibleList
        susceptibleCount = SurvivingSusceptibleCount
        print("Number of Susceptibles: " + str(susceptibleCount) )
        print("Number of Infected: " + str(infectedCount) )
